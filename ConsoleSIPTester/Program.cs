using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using gSIP.Channels;
using gSIP.Common;
using gSIP.Common.Strings;
using gSIP.Logger;
using gSIP.Message;
using log4net;
using System.IO;
using System.Configuration;
using System.Net;
using gSIP.Message.Parsers;

namespace ConsoleSIPTester
{
    class Program
    {
        /// <summary>
        /// Логгер для ведения журнала событий приложения.
        /// </summary>
        protected static ILog Log = AppLogger.DefaultLogger;

        static void Main(string[] args)
        {
            byte[] data = new byte[] {
                0x49, 0x4E, 0x56, 0x49, 0x54, 0x45, 0x20, 0x73, 0x69, 0x70, 0x3A, 0x37, 0x39, 0x30, 0x31, 0x35,
                0x39, 0x33, 0x31, 0x33, 0x39, 0x35, 0x40, 0x38, 0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30,
                0x2E, 0x38, 0x33, 0x20, 0x53, 0x49, 0x50, 0x2F, 0x32, 0x2E, 0x30, 0x0D, 0x0A, 0x56, 0x69, 0x61,
                0x3A, 0x20, 0x53, 0x49, 0x50, 0x2F, 0x32, 0x2E, 0x30, 0x2F, 0x55, 0x44, 0x50, 0x20, 0x31, 0x38,
                0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31, 0x30, 0x39, 0x2E, 0x32, 0x35, 0x30, 0x3A, 0x35, 0x30,
                0x36, 0x30, 0x3B, 0x72, 0x70, 0x6F, 0x72, 0x74, 0x3B, 0x62, 0x72, 0x61, 0x6E, 0x63, 0x68, 0x3D,
                0x7A, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4B, 0x34, 0x66, 0x63, 0x61, 0x32, 0x61, 0x35, 0x37, 0x35,
                0x65, 0x37, 0x33, 0x39, 0x31, 0x32, 0x62, 0x39, 0x33, 0x64, 0x30, 0x37, 0x63, 0x32, 0x37, 0x39,
                0x36, 0x30, 0x65, 0x63, 0x66, 0x39, 0x32, 0x0D, 0x0A, 0x46, 0x72, 0x6F, 0x6D, 0x3A, 0x20, 0x22,
                0x38, 0x38, 0x33, 0x31, 0x34, 0x30, 0x37, 0x37, 0x36, 0x33, 0x33, 0x38, 0x31, 0x30, 0x38, 0x22,
                0x20, 0x3C, 0x73, 0x69, 0x70, 0x3A, 0x38, 0x38, 0x33, 0x31, 0x34, 0x30, 0x37, 0x37, 0x36, 0x33,
                0x33, 0x38, 0x31, 0x30, 0x38, 0x40, 0x38, 0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30, 0x2E,
                0x38, 0x33, 0x3E, 0x3B, 0x74, 0x61, 0x67, 0x3D, 0x61, 0x39, 0x61, 0x65, 0x39, 0x62, 0x64, 0x34,
                0x30, 0x66, 0x62, 0x39, 0x35, 0x39, 0x65, 0x65, 0x0D, 0x0A, 0x54, 0x6F, 0x3A, 0x20, 0x3C, 0x73,
                0x69, 0x70, 0x3A, 0x37, 0x39, 0x30, 0x31, 0x35, 0x39, 0x33, 0x31, 0x33, 0x39, 0x35, 0x40, 0x38,
                0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x38, 0x33, 0x3E, 0x0D, 0x0A, 0x43, 0x61,
                0x6C, 0x6C, 0x2D, 0x49, 0x44, 0x3A, 0x20, 0x32, 0x62, 0x39, 0x63, 0x30, 0x61, 0x66, 0x33, 0x61,
                0x34, 0x35, 0x33, 0x35, 0x33, 0x35, 0x39, 0x39, 0x33, 0x38, 0x66, 0x37, 0x33, 0x32, 0x34, 0x62,
                0x30, 0x63, 0x37, 0x39, 0x36, 0x62, 0x63, 0x0D, 0x0A, 0x43, 0x53, 0x65, 0x71, 0x3A, 0x20, 0x31,
                0x38, 0x31, 0x34, 0x36, 0x35, 0x31, 0x30, 0x35, 0x39, 0x20, 0x49, 0x4E, 0x56, 0x49, 0x54, 0x45,
                0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x63, 0x74, 0x3A, 0x20, 0x22, 0x38, 0x38, 0x33, 0x31,
                0x34, 0x30, 0x37, 0x37, 0x36, 0x33, 0x33, 0x38, 0x31, 0x30, 0x38, 0x22, 0x20, 0x3C, 0x73, 0x69,
                0x70, 0x3A, 0x38, 0x38, 0x33, 0x31, 0x34, 0x30, 0x37, 0x37, 0x36, 0x33, 0x33, 0x38, 0x31, 0x30,
                0x38, 0x40, 0x31, 0x38, 0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31, 0x30, 0x39, 0x2E, 0x32, 0x35,
                0x30, 0x3A, 0x35, 0x30, 0x36, 0x30, 0x3B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x70, 0x6F, 0x72, 0x74,
                0x3D, 0x75, 0x64, 0x70, 0x3E, 0x0D, 0x0A, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x69, 0x7A, 0x61,
                0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65,
                0x72, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x33, 0x33, 0x38, 0x31, 0x30, 0x38, 0x22, 0x2C, 0x72,
                0x65, 0x61, 0x6C, 0x6D, 0x3D, 0x22, 0x6C, 0x6F, 0x67, 0x69, 0x6E, 0x2E, 0x6E, 0x6E, 0x6E, 0x2E,
                0x72, 0x75, 0x22, 0x2C, 0x6E, 0x6F, 0x6E, 0x63, 0x65, 0x3D, 0x22, 0x35, 0x30, 0x61, 0x63, 0x31,
                0x37, 0x62, 0x32, 0x30, 0x65, 0x30, 0x34, 0x32, 0x22, 0x2C, 0x72, 0x65, 0x73, 0x70, 0x6F, 0x6E,
                0x73, 0x65, 0x3D, 0x22, 0x30, 0x36, 0x33, 0x65, 0x62, 0x31, 0x36, 0x64, 0x65, 0x64, 0x62, 0x61,
                0x61, 0x22, 0x2C, 0x75, 0x72, 0x69, 0x3D, 0x22, 0x73, 0x69, 0x70, 0x3A, 0x31, 0x32, 0x33, 0x40,
                0x38, 0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x38, 0x33, 0x22, 0x0D, 0x0A, 0x4D,
                0x61, 0x78, 0x2D, 0x46, 0x6F, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3A, 0x20, 0x37, 0x30, 0x0D,
                0x0A, 0x41, 0x6C, 0x6C, 0x6F, 0x77, 0x3A, 0x20, 0x49, 0x4E, 0x56, 0x49, 0x54, 0x45, 0x2C, 0x41,
                0x43, 0x4B, 0x2C, 0x43, 0x41, 0x4E, 0x43, 0x45, 0x4C, 0x2C, 0x4F, 0x50, 0x54, 0x49, 0x4F, 0x4E,
                0x53, 0x2C, 0x42, 0x59, 0x45, 0x2C, 0x49, 0x4E, 0x46, 0x4F, 0x2C, 0x4E, 0x4F, 0x54, 0x49, 0x46,
                0x59, 0x2C, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E,
                0x74, 0x2D, 0x54, 0x79, 0x70, 0x65, 0x3A, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74,
                0x69, 0x6F, 0x6E, 0x2F, 0x73, 0x64, 0x70, 0x0D, 0x0A, 0x53, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74,
                0x65, 0x64, 0x3A, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x72, 0x0D, 0x0A, 0x55, 0x73, 0x65, 0x72, 0x2D,
                0x41, 0x67, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x49, 0x50, 0x20, 0x4F, 0x66, 0x66, 0x69, 0x63, 0x65,
                0x20, 0x39, 0x2E, 0x30, 0x2E, 0x31, 0x32, 0x2E, 0x30, 0x20, 0x62, 0x75, 0x69, 0x6C, 0x64, 0x20,
                0x31, 0x30, 0x30, 0x36, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x4C, 0x65,
                0x6E, 0x67, 0x74, 0x68, 0x3A, 0x20, 0x33, 0x30, 0x32, 0x0D, 0x0A, 0x0D, 0x0A, 0x76, 0x3D, 0x30,
                0x0D, 0x0A, 0x6F, 0x3D, 0x55, 0x73, 0x65, 0x72, 0x41, 0x20, 0x31, 0x39, 0x38, 0x35, 0x31, 0x37,
                0x32, 0x37, 0x31, 0x39, 0x20, 0x34, 0x30, 0x35, 0x31, 0x39, 0x31, 0x35, 0x34, 0x33, 0x35, 0x20,
                0x49, 0x4E, 0x20, 0x49, 0x50, 0x34, 0x20, 0x31, 0x38, 0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31,
                0x30, 0x39, 0x2E, 0x32, 0x35, 0x30, 0x0D, 0x0A, 0x73, 0x3D, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6F,
                0x6E, 0x20, 0x53, 0x44, 0x50, 0x0D, 0x0A, 0x63, 0x3D, 0x49, 0x4E, 0x20, 0x49, 0x50, 0x34, 0x20,
                0x31, 0x38, 0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31, 0x30, 0x39, 0x2E, 0x32, 0x35, 0x30, 0x0D,
                0x0A, 0x74, 0x3D, 0x30, 0x20, 0x30, 0x0D, 0x0A, 0x6D, 0x3D, 0x61, 0x75, 0x64, 0x69, 0x6F, 0x20,
                0x34, 0x39, 0x31, 0x39, 0x34, 0x20, 0x52, 0x54, 0x50, 0x2F, 0x41, 0x56, 0x50, 0x20, 0x38, 0x20,
                0x30, 0x20, 0x31, 0x38, 0x20, 0x34, 0x20, 0x39, 0x36, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70,
                0x6D, 0x61, 0x70, 0x3A, 0x38, 0x20, 0x50, 0x43, 0x4D, 0x41, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D,
                0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61, 0x70, 0x3A, 0x30, 0x20, 0x50, 0x43, 0x4D, 0x55,
                0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61, 0x70, 0x3A,
                0x31, 0x38, 0x20, 0x47, 0x37, 0x32, 0x39, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D,
                0x66, 0x6D, 0x74, 0x70, 0x3A, 0x31, 0x38, 0x20, 0x61, 0x6E, 0x6E, 0x65, 0x78, 0x62, 0x3D, 0x6E,
                0x6F, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61, 0x70, 0x3A, 0x34, 0x20, 0x47, 0x37,
                0x32, 0x33, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61,
                0x70, 0x3A, 0x39, 0x36, 0x20, 0x74, 0x65, 0x6C, 0x65, 0x70, 0x68, 0x6F, 0x6E, 0x65, 0x2D, 0x65,
                0x76, 0x65, 0x6E, 0x74, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D, 0x66, 0x6D, 0x74,
                0x70, 0x3A, 0x39, 0x36, 0x20, 0x30, 0x2D, 0x31, 0x35,
            };

            ParseSIPMessageFields.Parser(data);

            Console.WriteLine("Работа приложения завершена, нажмите любую клавишу.");
            Console.ReadKey();
            return;
            // ------------------------------------------------------

            string sourceSIPMessages = string.Empty;
            SIPEndPoint destinationEndPoint;
            int delayMin = 0;
            int delayMax = 0;

            // загрузка файла с тестовыми SIP-сообщениями.
            try
            {
                string testFilePath = ConfigurationManager.AppSettings["testFilePath"];
                string destIP = ConfigurationManager.AppSettings["destIP"];
                string destUDPPort = ConfigurationManager.AppSettings["destUDPPort"];
                string dMin = ConfigurationManager.AppSettings["delayMin"];
                string dMax = ConfigurationManager.AppSettings["delayMax"];

                delayMin = int.Parse(dMin);
                delayMax = int.Parse(dMax);

                destinationEndPoint = new SIPEndPoint(new IPEndPoint(IPAddress.Parse(destIP), int.Parse(destUDPPort)),
                    SIPProtocolType.Udp);

                if (File.Exists(testFilePath))
                {
                    sourceSIPMessages = File.ReadAllText(".\\SIPTestMessages.txt", Encoding.UTF8);
                }
                else
                {
                    Log.FatalFormat("Файл {0} не найден.", testFilePath);
                }
            }
            catch (Exception ex)
            {
                Log.Error("Ошибка инициализации.", ex);
                return;
            }

            // Тестовые SIP-сообщения.
            string[] sipMessages = sourceSIPMessages.Split('ё');

            Log.InfoFormat("Конечная точка назначения: {0}.", destinationEndPoint.ToString());
            Log.InfoFormat("Задержка от {0} до {1} мс.", delayMin, delayMax);
            Log.InfoFormat("Загружено {0} тестовых сообщений.", sipMessages.Length);

            // Запуск UDP-канала Channel_01
            SIPEndPoint localEndPoint = new SIPEndPoint(Network.GetIPv4Address(),
                Network.GetFreeUDPPort(Network.GetIPv4Address(), destinationEndPoint.EndPoint.Port, 65535),
                SIPProtocolType.Udp);
            SIPUDPChannel Channel01 = new SIPUDPChannel(localEndPoint, "Channel_01");
            Channel01.Start();

            Random rnd = new Random();

            Console.WriteLine("Нажмите любую клавишу для начала отправки SIP-сообщений...");
            Console.ReadKey();

            // ------------------------------------------------------

            foreach (string sipMessage in sipMessages)
            {
                Channel01.Send(new SIPRawData (StringHelper.GetArray(sipMessage), destinationEndPoint));
                
                Thread.Sleep(rnd.Next(delayMin, delayMax));
            }

            // ------------------------------------------------------

            // Остановка каналов
            Channel01.Stop();

            // ------------------------------------------------------
            Console.WriteLine("Работа приложения завершена, нажмите любую клавишу.");
            Console.ReadKey();
        }
    }
}
