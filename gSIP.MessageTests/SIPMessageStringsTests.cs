using Microsoft.VisualStudio.TestTools.UnitTesting;
using gSIP.Message;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace gSIP.Message.Tests
{
    [TestClass()]
    public class SIPMessageStringsTests
    {
        [TestMethod()]
        public void SIPMessageStrings_ParseByteArrayTest()
        {
            byte[] data = new byte[] {
                0x49, 0x4E, 0x56, 0x49, 0x54, 0x45, 0x20, 0x73, 0x69, 0x70, 0x3A, 0x37, 0x39, 0x30, 0x31, 0x35,
                0x39, 0x33, 0x31, 0x33, 0x39, 0x35, 0x40, 0x38, 0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30,
                0x2E, 0x38, 0x33, 0x20, 0x53, 0x49, 0x50, 0x2F, 0x32, 0x2E, 0x30, 0x0D, 0x0A, 0x56, 0x69, 0x61,
                0x3A, 0x20, 0x53, 0x49, 0x50, 0x2F, 0x32, 0x2E, 0x30, 0x2F, 0x55, 0x44, 0x50, 0x20, 0x31, 0x38,
                0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31, 0x30, 0x39, 0x2E, 0x32, 0x35, 0x30, 0x3A, 0x35, 0x30,
                0x36, 0x30, 0x3B, 0x72, 0x70, 0x6F, 0x72, 0x74, 0x3B, 0x62, 0x72, 0x61, 0x6E, 0x63, 0x68, 0x3D,
                0x7A, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4B, 0x34, 0x66, 0x63, 0x61, 0x32, 0x61, 0x35, 0x37, 0x35,
                0x65, 0x37, 0x33, 0x39, 0x31, 0x32, 0x62, 0x39, 0x33, 0x64, 0x30, 0x37, 0x63, 0x32, 0x37, 0x39,
                0x36, 0x30, 0x65, 0x63, 0x66, 0x39, 0x32, 0x0D, 0x0A, 0x46, 0x72, 0x6F, 0x6D, 0x3A, 0x20, 0x22,
                0x38, 0x38, 0x33, 0x31, 0x34, 0x30, 0x37, 0x37, 0x36, 0x33, 0x33, 0x38, 0x31, 0x30, 0x38, 0x22,
                0x20, 0x3C, 0x73, 0x69, 0x70, 0x3A, 0x38, 0x38, 0x33, 0x31, 0x34, 0x30, 0x37, 0x37, 0x36, 0x33,
                0x33, 0x38, 0x31, 0x30, 0x38, 0x40, 0x38, 0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30, 0x2E,
                0x38, 0x33, 0x3E, 0x3B, 0x74, 0x61, 0x67, 0x3D, 0x61, 0x39, 0x61, 0x65, 0x39, 0x62, 0x64, 0x34,
                0x30, 0x66, 0x62, 0x39, 0x35, 0x39, 0x65, 0x65, 0x0D, 0x0A, 0x54, 0x6F, 0x3A, 0x20, 0x3C, 0x73,
                0x69, 0x70, 0x3A, 0x37, 0x39, 0x30, 0x31, 0x35, 0x39, 0x33, 0x31, 0x33, 0x39, 0x35, 0x40, 0x38,
                0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x38, 0x33, 0x3E, 0x0D, 0x0A, 0x43, 0x61,
                0x6C, 0x6C, 0x2D, 0x49, 0x44, 0x3A, 0x20, 0x32, 0x62, 0x39, 0x63, 0x30, 0x61, 0x66, 0x33, 0x61,
                0x34, 0x35, 0x33, 0x35, 0x33, 0x35, 0x39, 0x39, 0x33, 0x38, 0x66, 0x37, 0x33, 0x32, 0x34, 0x62,
                0x30, 0x63, 0x37, 0x39, 0x36, 0x62, 0x63, 0x0D, 0x0A, 0x43, 0x53, 0x65, 0x71, 0x3A, 0x20, 0x31,
                0x38, 0x31, 0x34, 0x36, 0x35, 0x31, 0x30, 0x35, 0x39, 0x20, 0x49, 0x4E, 0x56, 0x49, 0x54, 0x45,
                0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x61, 0x63, 0x74, 0x3A, 0x20, 0x22, 0x38, 0x38, 0x33, 0x31,
                0x34, 0x30, 0x37, 0x37, 0x36, 0x33, 0x33, 0x38, 0x31, 0x30, 0x38, 0x22, 0x20, 0x3C, 0x73, 0x69,
                0x70, 0x3A, 0x38, 0x38, 0x33, 0x31, 0x34, 0x30, 0x37, 0x37, 0x36, 0x33, 0x33, 0x38, 0x31, 0x30,
                0x38, 0x40, 0x31, 0x38, 0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31, 0x30, 0x39, 0x2E, 0x32, 0x35,
                0x30, 0x3A, 0x35, 0x30, 0x36, 0x30, 0x3B, 0x74, 0x72, 0x61, 0x6E, 0x73, 0x70, 0x6F, 0x72, 0x74,
                0x3D, 0x75, 0x64, 0x70, 0x3E, 0x0D, 0x0A, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x69, 0x7A, 0x61,
                0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65,
                0x72, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x33, 0x33, 0x38, 0x31, 0x30, 0x38, 0x22, 0x2C, 0x72,
                0x65, 0x61, 0x6C, 0x6D, 0x3D, 0x22, 0x6C, 0x6F, 0x67, 0x69, 0x6E, 0x2E, 0x6E, 0x6E, 0x6E, 0x2E,
                0x72, 0x75, 0x22, 0x2C, 0x6E, 0x6F, 0x6E, 0x63, 0x65, 0x3D, 0x22, 0x35, 0x30, 0x61, 0x63, 0x31,
                0x37, 0x62, 0x32, 0x30, 0x65, 0x30, 0x34, 0x32, 0x22, 0x2C, 0x72, 0x65, 0x73, 0x70, 0x6F, 0x6E,
                0x73, 0x65, 0x3D, 0x22, 0x30, 0x36, 0x33, 0x65, 0x62, 0x31, 0x36, 0x64, 0x65, 0x64, 0x62, 0x61,
                0x61, 0x22, 0x2C, 0x75, 0x72, 0x69, 0x3D, 0x22, 0x73, 0x69, 0x70, 0x3A, 0x31, 0x32, 0x33, 0x40,
                0x38, 0x30, 0x2E, 0x37, 0x35, 0x2E, 0x31, 0x33, 0x30, 0x2E, 0x38, 0x33, 0x22, 0x0D, 0x0A, 0x4D,
                0x61, 0x78, 0x2D, 0x46, 0x6F, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3A, 0x20, 0x37, 0x30, 0x0D,
                0x0A, 0x41, 0x6C, 0x6C, 0x6F, 0x77, 0x3A, 0x20, 0x49, 0x4E, 0x56, 0x49, 0x54, 0x45, 0x2C, 0x41,
                0x43, 0x4B, 0x2C, 0x43, 0x41, 0x4E, 0x43, 0x45, 0x4C, 0x2C, 0x4F, 0x50, 0x54, 0x49, 0x4F, 0x4E,
                0x53, 0x2C, 0x42, 0x59, 0x45, 0x2C, 0x49, 0x4E, 0x46, 0x4F, 0x2C, 0x4E, 0x4F, 0x54, 0x49, 0x46,
                0x59, 0x2C, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E,
                0x74, 0x2D, 0x54, 0x79, 0x70, 0x65, 0x3A, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74,
                0x69, 0x6F, 0x6E, 0x2F, 0x73, 0x64, 0x70, 0x0D, 0x0A, 0x53, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74,
                0x65, 0x64, 0x3A, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x72, 0x0D, 0x0A, 0x55, 0x73, 0x65, 0x72, 0x2D,
                0x41, 0x67, 0x65, 0x6E, 0x74, 0x3A, 0x20, 0x49, 0x50, 0x20, 0x4F, 0x66, 0x66, 0x69, 0x63, 0x65,
                0x20, 0x39, 0x2E, 0x30, 0x2E, 0x31, 0x32, 0x2E, 0x30, 0x20, 0x62, 0x75, 0x69, 0x6C, 0x64, 0x20,
                0x31, 0x30, 0x30, 0x36, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x4C, 0x65,
                0x6E, 0x67, 0x74, 0x68, 0x3A, 0x20, 0x33, 0x30, 0x32, 0x0D, 0x0A, 0x0D, 0x0A, 0x76, 0x3D, 0x30,
                0x0D, 0x0A, 0x6F, 0x3D, 0x55, 0x73, 0x65, 0x72, 0x41, 0x20, 0x31, 0x39, 0x38, 0x35, 0x31, 0x37,
                0x32, 0x37, 0x31, 0x39, 0x20, 0x34, 0x30, 0x35, 0x31, 0x39, 0x31, 0x35, 0x34, 0x33, 0x35, 0x20,
                0x49, 0x4E, 0x20, 0x49, 0x50, 0x34, 0x20, 0x31, 0x38, 0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31,
                0x30, 0x39, 0x2E, 0x32, 0x35, 0x30, 0x0D, 0x0A, 0x73, 0x3D, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6F,
                0x6E, 0x20, 0x53, 0x44, 0x50, 0x0D, 0x0A, 0x63, 0x3D, 0x49, 0x4E, 0x20, 0x49, 0x50, 0x34, 0x20,
                0x31, 0x38, 0x38, 0x2E, 0x32, 0x35, 0x34, 0x2E, 0x31, 0x30, 0x39, 0x2E, 0x32, 0x35, 0x30, 0x0D,
                0x0A, 0x74, 0x3D, 0x30, 0x20, 0x30, 0x0D, 0x0A, 0x6D, 0x3D, 0x61, 0x75, 0x64, 0x69, 0x6F, 0x20,
                0x34, 0x39, 0x31, 0x39, 0x34, 0x20, 0x52, 0x54, 0x50, 0x2F, 0x41, 0x56, 0x50, 0x20, 0x38, 0x20,
                0x30, 0x20, 0x31, 0x38, 0x20, 0x34, 0x20, 0x39, 0x36, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70,
                0x6D, 0x61, 0x70, 0x3A, 0x38, 0x20, 0x50, 0x43, 0x4D, 0x41, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D,
                0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61, 0x70, 0x3A, 0x30, 0x20, 0x50, 0x43, 0x4D, 0x55,
                0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61, 0x70, 0x3A,
                0x31, 0x38, 0x20, 0x47, 0x37, 0x32, 0x39, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D,
                0x66, 0x6D, 0x74, 0x70, 0x3A, 0x31, 0x38, 0x20, 0x61, 0x6E, 0x6E, 0x65, 0x78, 0x62, 0x3D, 0x6E,
                0x6F, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61, 0x70, 0x3A, 0x34, 0x20, 0x47, 0x37,
                0x32, 0x33, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D, 0x72, 0x74, 0x70, 0x6D, 0x61,
                0x70, 0x3A, 0x39, 0x36, 0x20, 0x74, 0x65, 0x6C, 0x65, 0x70, 0x68, 0x6F, 0x6E, 0x65, 0x2D, 0x65,
                0x76, 0x65, 0x6E, 0x74, 0x2F, 0x38, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x61, 0x3D, 0x66, 0x6D, 0x74,
                0x70, 0x3A, 0x39, 0x36, 0x20, 0x30, 0x2D, 0x31, 0x35,
            };

            SIPMessageStrings ms = SIPMessageStrings.ParseByteArray(data);

            Assert.AreEqual("INVITE sip:79015931395@80.75.130.83 SIP/2.0", ms.StartLine, "StartLine");
            Assert.AreEqual("Via: SIP/2.0/UDP 188.254.109.250:5060;rport;branch=z9hG4bK4fca2a575e73912b93d07c27960ecf92", ms.Headers[0], "Headers[0]");
            Assert.AreEqual("Contact: \"883140776338108\" <sip:883140776338108@188.254.109.250:5060;transport=udp>", ms.Headers[5], "Headers[5]");
            Assert.AreEqual("Content-Length: 302", ms.Headers[12], "Headers[12]");
            Assert.AreEqual(13, ms.Headers.Count, "Headers.Count");

            string msgBody = "v=0" + "\r\n" +
                "o=UserA 1985172719 4051915435 IN IP4 188.254.109.250" + "\r\n" +
                "s=Session SDP" + "\r\n" +
                "c=IN IP4 188.254.109.250" + "\r\n" +
                "t=0 0" + "\r\n" +
                "m=audio 49194 RTP/AVP 8 0 18 4 96" + "\r\n" +
                "a=rtpmap:8 PCMA/8000" + "\r\n" +
                "a=rtpmap:0 PCMU/8000" + "\r\n" +
                "a=rtpmap:18 G729/8000" + "\r\n" +
                "a=fmtp:18 annexb=no" + "\r\n" +
                "a=rtpmap:4 G723/8000" + "\r\n" +
                "a=rtpmap:96 telephone-event/8000" + "\r\n" +
                "a=fmtp:96 0-15";

            Assert.AreEqual(msgBody, ms.MessageBody, "MessageBody");
        }
    }
}